{"version":3,"sources":["../../../server/config/socketio-compiled.js"],"names":[],"mappings":";;;AAGA,YAAY,CAAC;;;;;;;;2BAEM,eAAe;;;;;AAGlC,SAAS,YAAY,CAAC,MAAM,EAAE,EAAE;;;AAGhC,SAAS,SAAS,CAAC,MAAM,EAAE;;AAEzB,QAAM,CAAC,EAAE,CAAC,MAAM,EAAE,UAAA,IAAI,EAAI;AACxB,UAAM,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;GAC3C,CAAC,CAAC;;;AAGH,SAAO,CAAC,6BAA6B,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AACxD,SAAO,CAAC,6BAA6B,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AACxD,SAAO,CAAC,+BAA+B,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AAC1D,SAAO,CAAC,qBAAqB,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AAChD,SAAO,CAAC,2BAA2B,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;CACvD;;qBAEc,UAAU,QAAQ,EAAE;;;;;;;;;;;;;;;;AAgBjC,UAAQ,CAAC,EAAE,CAAC,YAAY,EAAE,UAAU,MAAM,EAAE;AAC1C,UAAM,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,aAAa,GAAG,GAAG,GAAG,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC;;AAEtG,UAAM,CAAC,WAAW,GAAG,IAAI,IAAI,EAAE,CAAC;;AAEhC,UAAM,CAAC,GAAG,GAAG,YAAmB;wCAAN,IAAI;AAAJ,YAAI;;;AAC5B,aAAO,CAAC,GAAG,MAAA,CAAX,OAAO,iBAAkB,MAAM,CAAC,GAAG,CAAC,IAAI,UAAO,MAAM,CAAC,OAAO,eAAS,IAAI,EAAC,CAAC;KAC7E,CAAC;;;AAGF,UAAM,CAAC,EAAE,CAAC,YAAY,EAAE,YAAM;AAC5B,kBAAY,CAAC,MAAM,CAAC,CAAC;AACrB,YAAM,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;KAC5B,CAAC,CAAC;;;AAGH,aAAS,CAAC,MAAM,CAAC,CAAC;AAClB,UAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;GACzB,CAAC,CAAC;CACJ","file":"socketio-compiled.js","sourcesContent":["/**\n * Socket.io configuration\n */\n'use strict';\n\nimport config from './environment';\n\n// When the user disconnects.. perform this\nfunction onDisconnect(socket) {}\n\n// When the user connects.. perform this\nfunction onConnect(socket) {\n  // When the client emits 'info', this listens and executes\n  socket.on('info', data => {\n    socket.log(JSON.stringify(data, null, 2));\n  });\n\n  // Insert sockets below\n  require('../api/client/client.socket').register(socket);\n  require('../api/vendor/vendor.socket').register(socket);\n  require('../api/invoice/invoice.socket').register(socket);\n  require('../api/po/po.socket').register(socket);\n  require('../api/thing/thing.socket').register(socket);\n}\n\nexport default function (socketio) {\n  // socket.io (v1.x.x) is powered by debug.\n  // In order to see all the debug output, set DEBUG (in server/config/local.env.js) to including the desired scope.\n  //\n  // ex: DEBUG: \"http*,socket.io:socket\"\n\n  // We can authenticate socket.io users and access their token through socket.decoded_token\n  //\n  // 1. You will need to send the token in `client/components/socket/socket.service.js`\n  //\n  // 2. Require authentication here:\n  // socketio.use(require('socketio-jwt').authorize({\n  //   secret: config.secrets.session,\n  //   handshake: true\n  // }));\n\n  socketio.on('connection', function (socket) {\n    socket.address = socket.request.connection.remoteAddress + ':' + socket.request.connection.remotePort;\n\n    socket.connectedAt = new Date();\n\n    socket.log = function (...data) {\n      console.log(`SocketIO ${ socket.nsp.name } [${ socket.address }]`, ...data);\n    };\n\n    // Call onDisconnect.\n    socket.on('disconnect', () => {\n      onDisconnect(socket);\n      socket.log('DISCONNECTED');\n    });\n\n    // Call onConnect.\n    onConnect(socket);\n    socket.log('CONNECTED');\n  });\n}\n\n//# sourceMappingURL=socketio-compiled.js.map"]}