{"version":3,"sources":["../../../../server/components/intervals/interval.js"],"names":[],"mappings":";;AAGA,YAAY,CAAC;;;;;;;;;sBAEC,QAAQ;;;;sCACF,iCAAiC;;;;AACrD,IAAI,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;AAC/B,IAAI,UAAU,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;;;AAIvC,WAAW,CAAC,YAAU;;AAGpB,sCAAQ,SAAS,CAAC,EAAC,MAAM,EAAC,MAAM,EAAC,CAAC,CAC/B,IAAI,CAAC,UAAC,QAAQ,EAAG;;AAEhB,QAAI,eAAe,GAAG,EAAE,CAAC;AACzB,SAAI,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;AACvC,UAAI,OAAO,GAAG,yCAAa,CAAC;AAC5B,aAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;;AAKtB,UAAI,YAAY,GAAG,MAAM,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;AACjD,UAAI,UAAU,GAAG,MAAM,CAAC,YAAY,EAAC,YAAY,CAAC,CAAC;AACnD,UAAI,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,EAAC,YAAY,CAAC,CAAC;AACjD,UAAI,QAAQ,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAC,MAAM,CAAC,CAAC;;AAEhD,UAAG,QAAQ,GAAG,EAAE,EAAC;;AAEf,uBAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;OAC/B;;AAED,aAAO,CAAC,GAAG,CAAC,qCAAqC,GAAG,OAAO,CAAC,IAAI,GAAG,KAAK,GAAG,OAAO,CAAC,IAAI,GAAI,GAAG,GAAG,YAAY,CAAC,CAAC;AAC/G,aAAO,CAAC,GAAG,CAAC,cAAc,GAAG,UAAU,CAAC,CAAC;AACzC,aAAO,CAAC,GAAG,CAAC,YAAY,GAAG,QAAQ,CAAC,CAAC;AACrC,aAAO,CAAC,GAAG,CAAC,2BAA2B,GAAG,QAAQ,CAAC,CAAC;AACpD,kCAA4B,CAAC,eAAe,CAAC,CAAC;KAE/C;GAEF,CAAC,SACI,CAAC,YAAI;AACT,WAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;GACjC,CAAC,CAAC;;;;AAIL,SAAO,CAAC,GAAG,CAAC,iBAAiB,GAAG,MAAM,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;;AAE/D,SAAO,CAAC,GAAG,CAAC,eAAe,GAAC,IAAI,IAAI,EAAE,CAAC,CAAC;CACzC,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAA;;AAEhB,SAAS,4BAA4B,CAAC,eAAe,EAAE;;;CAG7D","file":"interval.js","sourcesContent":["\n\n\n'use strict';\n\nimport _ from 'lodash';\nimport Invoice from '../../api/invoice/invoice.model';\nvar moment = require('moment');\nvar nodemailer = require('nodemailer');\n\n\n//now we are going to try to create our interval timer here.\nsetInterval(function(){\n\n\n  Invoice.findAsync({status:'sent'})\n    .then((response)=>{\n\n      var expiredInvoices = [];\n      for(var i = 0; i < response.length; i++) {\n        var invoice = new Invoice();\n        invoice = response[i];\n\n\n\n\n        var current_date = moment().format('MM/DD/YYYY');\n        var start_date = moment(current_date,'MM/DD/YYYY');\n        var end_date = moment(invoice.date,'MM/DD/YYYY');\n        var day_diff = start_date.diff(end_date,'days');\n\n        if(day_diff > 30){\n          //at this point we need to push the current invoice into the expired array\n          expiredInvoices.push(invoice);\n        }\n\n        console.log(\"found invoice/date/formatted date: \" + invoice.name + \" / \" + invoice.date  + \"-\" + current_date);\n        console.log(\"start date: \" + start_date);\n        console.log(\"end date: \" + end_date);\n        console.log(\"Date difference in days: \" + day_diff);\n        sendInvoiceEmailNotification(expiredInvoices);\n\n      }\n\n    })\n    .catch(()=>{\n      console.log(\"An error occured\");\n    });\n\n  //now we will select the invoices where status = 'entered';\n\n  console.log(\"current month: \" + moment().format('MM/DD/YYYY'));\n\n  console.log(\"Current Time-\"+new Date());\n}, 1000 * 60 * 60 * 24)\n\nexport function sendInvoiceEmailNotification(expiredInvoices) {\n\n//  This is where we will format and send an email/text to configured users.\n}\n\n"]}